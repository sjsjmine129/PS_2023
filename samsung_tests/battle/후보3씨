#include <vector>
#include <queue>
using namespace std;

const int MAX_SIZE = 20;
const int MAX_HASH_VALUE = 9999;

int gridSize;
int originalMap[MAX_SIZE + 2][MAX_SIZE + 2];
int tempMap[MAX_SIZE + 2][MAX_SIZE + 2];

struct StructureInfo {
    int row;
    int col;
    bool isHorizontal;
    bool isReversed;
};

vector<StructureInfo> structureList[MAX_HASH_VALUE + 1];
bool visited[MAX_SIZE + 2][MAX_SIZE + 2];

int rowMoves[4] = {1, 0, -1, 0};
int colMoves[4] = {0, 1, 0, -1};

// Helper: Generate hash value from map structure
int generateHash(int baseValue, int length, bool reverse, int mapSegment[]) {
    int hashValue = 0;
    for (int i = 0; i < length - 1; i++) {
        int diff = reverse ? (mapSegment[length - 1 - i] - mapSegment[length - 2 - i]) : (mapSegment[i + 1] - mapSegment[i]);
        hashValue = hashValue * 10 + (diff + 5);
    }
    return hashValue;
}

void init(int N, int mMap[20][20]) {
    gridSize = N;

    // Copy input map into original and temporary maps
    for (int i = 1; i <= gridSize; i++)
        for (int j = 1; j <= gridSize; j++)
            tempMap[i][j] = originalMap[i][j] = mMap[i - 1][j - 1];

    // Clear structure lists
    for (auto &list : structureList)
        list.clear();

    // Precompute structures for all possible lengths
    for (int length = 2; length <= 5; length++) {
        for (int i = 1; i <= gridSize; i++) {
            for (int j = 1; j + length - 1 <= gridSize; j++) {
                // Generate and store horizontal structures
                int mapSegment[5];
                for (int k = 0; k < length; k++)
                    mapSegment[k] = originalMap[i][j + k];

                int forwardHash = generateHash(0, length, false, mapSegment);
                structureList[forwardHash].push_back({i, j, true, false});

                int reverseHash = generateHash(0, length, true, mapSegment);
                if (reverseHash != forwardHash)
                    structureList[reverseHash].push_back({i, j, true, true});
            }
        }
        
        // Generate and store vertical structures
        for (int i = 1; i + length - 1 <= gridSize; i++) {
            for (int j = 1; j <= gridSize; j++) {
                int mapSegment[5];
                for (int k = 0; k < length; k++)
                    mapSegment[k] = originalMap[i + k][j];

                int verticalHash = generateHash(0, length, false, mapSegment);
                structureList[verticalHash].push_back({i, j, false, false});

                int reverseVerticalHash = generateHash(0, length, true, mapSegment);
                if (reverseVerticalHash != verticalHash)
                    structureList[reverseVerticalHash].push_back({i, j, false, true});
            }
        }
    }
}

int numberOfCandidate(int M, int mStructure[5]) {
    if (M == 1)
        return gridSize * gridSize;

    int structureHash = 0;
    for (int i = 0; i + 1 < M; i++)
        structureHash = structureHash * 10 + (mStructure[i] - mStructure[i + 1] + 5);

    return structureList[structureHash].size();
}

// Helper: Calculate unsubmerged area using BFS
int calculateUnsubmergedArea(int mSeaLevel) {
    queue<pair<int, int>> seaQueue;
    fill(&visited[0][0], &visited[MAX_SIZE + 2][0], false);

    for (int i = 0; i <= gridSize + 1; i++)
        for (int j = 0; j <= gridSize + 1; j++)
            if (i == 0 || i == gridSize + 1 || j == 0 || j == gridSize + 1)
                seaQueue.push({i, j}), visited[i][j] = true;

    while (!seaQueue.empty()) {
        auto [row, col] = seaQueue.front();
        seaQueue.pop();

        for (int k = 0; k < 4; k++) {
            int newRow = row + rowMoves[k], newCol = col + colMoves[k];
            if (newRow >= 1 && newRow <= gridSize && newCol >= 1 && newCol <= gridSize &&
                !visited[newRow][newCol] && tempMap[newRow][newCol] < mSeaLevel) {
                seaQueue.push({newRow, newCol});
                visited[newRow][newCol] = true;
            }
        }
    }

    int safeArea = 0;
    for (int i = 1; i <= gridSize; i++)
        for (int j = 1; j <= gridSize; j++)
            if (!visited[i][j])
                safeArea++;

    return safeArea;
}

int maxArea(int M, int mStructure[5], int mSeaLevel) {
    int maxSafeArea = -1;

    if (M == 1) {
        for (int i = 1; i <= gridSize; i++) {
            for (int j = 1; j <= gridSize; j++) {
                tempMap[i][j] = originalMap[i][j] + mStructure[0];
                maxSafeArea = max(maxSafeArea, calculateUnsubmergedArea(mSeaLevel));
                tempMap[i][j] = originalMap[i][j];
            }
        }
        return maxSafeArea;
    }

    int structureHash = 0;
    for (int i = 0; i + 1 < M; i++)
        structureHash = structureHash * 10 + (mStructure[i] - mStructure[i + 1] + 5);

    for (const auto &wall : structureList[structureHash]) {
        int baseHeight = wall.isReversed ? originalMap[wall.row + (wall.isHorizontal ? 0 : M - 1)][wall.col + (wall.isHorizontal ? M - 1 : 0)] : originalMap[wall.row][wall.col];
        int height = mStructure[0] + baseHeight;

        for (int i = 0; i < M; i++) {
            if (wall.isHorizontal)
                tempMap[wall.row][wall.col + i] = height;
            else
                tempMap[wall.row + i][wall.col] = height;
        }

        maxSafeArea = max(maxSafeArea, calculateUnsubmergedArea(mSeaLevel));

        for (int i = 0; i < M; i++) {
            if (wall.isHorizontal)
                tempMap[wall.row][wall.col + i] = originalMap[wall.row][wall.col + i];
            else
                tempMap[wall.row + i][wall.col] = originalMap[wall.row + i][wall.col];
        }
    }
    return maxSafeArea;
}
