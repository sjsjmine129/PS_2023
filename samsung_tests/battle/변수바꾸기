#include <vector>
#include <queue>
using namespace ::std;

const int MAX_SIZE = 20;
const int MAX_HASH_VALUE = 9999; 

int gridSize;
int originalMap[MAX_SIZE + 2][MAX_SIZE + 2];
int tempMap[MAX_SIZE + 2][MAX_SIZE + 2];

struct StructureInfo
{
    int row;
    int col;
    bool isHorizontal;
    bool isReversed;
};

vector<StructureInfo> structureList[MAX_HASH_VALUE + 1];
bool visited[MAX_SIZE + 2][MAX_SIZE + 2];

int rowMoves[4] = {1, 0, -1, 0};
int colMoves[4] = {0, 1, 0, -1};
 
void init(int N, int mMap[20][20])
{
    gridSize = N;
    for (int i = 0; i < gridSize; i++)
        for (int j = 0; j < gridSize; j++)
            tempMap[i + 1][j + 1] = originalMap[i + 1][j + 1] = mMap[i][j];
    
    for (int i = 0; i <= MAX_HASH_VALUE; i++)
        structureList[i].clear();

    for (int length = 2; length <= 5; length++)
    {
        for (int i = 1; i <= gridSize; i++)
        {
            for (int j = 1; j + length - 1 <= gridSize; j++)
            {
                int forwardHash = 0;
                for (int k = 0; k + 1 < length; k++)
                    forwardHash = forwardHash * 10 + (originalMap[i][j + k + 1] - originalMap[i][j + k] + 5);
                structureList[forwardHash].push_back({i, j, true, false});

                int reverseHash = 0;
                for (int k = length - 1; k - 1 >= 0; k--)
                    reverseHash = reverseHash * 10 + (originalMap[i][j + k - 1] - originalMap[i][j + k] + 5);
                if (reverseHash != forwardHash)
                    structureList[reverseHash].push_back({i, j, true, true});
            }
        }

        for (int i = 1; i + length - 1 <= gridSize; i++)
        {
            for (int j = 1; j <= gridSize; j++)
            {
                int verticalHash = 0;
                for (int k = 0; k + 1 < length; k++)
                    verticalHash = verticalHash * 10 + (originalMap[i + k + 1][j] - originalMap[i + k][j] + 5);
                structureList[verticalHash].push_back({i, j, false, false});

                int reverseVerticalHash = 0;
                for (int k = length - 1; k - 1 >= 0; k--)
                    reverseVerticalHash = reverseVerticalHash * 10 + (originalMap[i + k - 1][j] - originalMap[i + k][j] + 5);
                if (reverseVerticalHash != verticalHash)
                    structureList[reverseVerticalHash].push_back({i, j, false, true});
            }
        }
    }
}
 
int numberOfCandidate(int M, int mStructure[5])
{
    if (M == 1)
        return gridSize * gridSize;

    int structureHash = 0;
    for (int i = 0; i + 1 < M; i++)
        structureHash = structureHash * 10 + (mStructure[i] - mStructure[i + 1] + 5);
    return structureList[structureHash].size();
}

int unsubmergedArea(int mMap[MAX_SIZE + 2][MAX_SIZE + 2], int mSeaLevel)
{
    queue<pair<int, int>> seaQueue;
    for (int i = 0; i <= gridSize + 1; i++)
    {
        for (int j = 0; j <= gridSize + 1; j++)
        {
            if (i == 0 || i == gridSize + 1 || j == 0 || j == gridSize + 1)
            {
                seaQueue.push({i, j});
                visited[i][j] = true;
            }
            else
                visited[i][j] = false;
        }
    }

    while (!seaQueue.empty())
    {
        pair<int, int> current = seaQueue.front();
        for (int i = 0; i < 4; i++)
        {
            pair<int, int> next = {current.first + rowMoves[i], current.second + colMoves[i]};
            if (next.first >= 1 && next.first <= gridSize && next.second >= 1 && next.second <= gridSize)
            {
                if (!visited[next.first][next.second] && mMap[next.first][next.second] < mSeaLevel)
                {
                    seaQueue.push(next);
                    visited[next.first][next.second] = true;
                }
            }
        }
        seaQueue.pop();
    }

    int safeArea = 0;
    for (int i = 1; i <= gridSize; i++)
        for (int j = 1; j <= gridSize; j++)
            if (!visited[i][j])
                safeArea++;
    return safeArea;
}
 
int maxArea(int M, int mStructure[5], int mSeaLevel)
{
    int maxSafeArea = -1;
    if (M == 1)
    {
        for (int i = 1; i <= gridSize; i++)
        {
            for (int j = 1; j <= gridSize; j++)
            {
                tempMap[i][j] = originalMap[i][j] + mStructure[0];
                maxSafeArea = max(maxSafeArea, unsubmergedArea(tempMap, mSeaLevel));
                tempMap[i][j] = originalMap[i][j];
            }
        }
        return maxSafeArea;
    }

    int structureHash = 0;
    for (int i = 0; i + 1 < M; i++)
        structureHash = structureHash * 10 + (mStructure[i] - mStructure[i + 1] + 5);

    for (auto wall : structureList[structureHash])
    {
        if (wall.isHorizontal)
        {
            int height = mStructure[0] + (wall.isReversed ? originalMap[wall.row][wall.col + M - 1] : originalMap[wall.row][wall.col]);
            for (int i = 0; i < M; i++)
                tempMap[wall.row][wall.col + i] = height;
            maxSafeArea = max(maxSafeArea, unsubmergedArea(tempMap, mSeaLevel));
            for (int i = 0; i < M; i++)
                tempMap[wall.row][wall.col + i] = originalMap[wall.row][wall.col + i];
        }
        else
        {
            int height = mStructure[0] + (wall.isReversed ? originalMap[wall.row + M - 1][wall.col] : originalMap[wall.row][wall.col]);
            for (int i = 0; i < M; i++)
                tempMap[wall.row + i][wall.col] = height;
            maxSafeArea = max(maxSafeArea, unsubmergedArea(tempMap, mSeaLevel));
            for (int i = 0; i < M; i++)
                tempMap[wall.row + i][wall.col] = originalMap[wall.row + i][wall.col];
        }
    }
    return maxSafeArea;
}
